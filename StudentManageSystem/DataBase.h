#pragma once
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ADDITIONAL 10		//当需要重新分配内存时,一次增加十个行


//错误代码
#define SUCCESS 0
#define ERR_OPENFILE 1
#define ERR_NOTSTANDARDFILE 2
#define ERR_MEMORYNOTENOUGH 3

//类型别名
typedef int ErrVal;
typedef char*** Chart_t;
typedef char** ChartPiece_t;

//定义一个表结构
typedef struct
{
	//表
	Chart_t Chart;				//整个表的入口首地址

	//标题
	int TitleCount;				//存储标题的个数
	ChartPiece_t ChartTitle;	//存储每个标题的字符(每个标题不得超过31个字母)
	int* ChartLimits;			//存储每一个标题下的单元格里的字符串的最大长度

	//行
	int AllocatedLines;			//表已分配的大小(此值大于等于UsedLines)(已分配但未使用的行未申请内存)
	int UsedLines;				//在表中实际被使用的行
	int HadInit;				//记录这个表是否已经被初始化
} Chart;

//定义一个索引结构体,它是一个表的分身,表中元素的显示顺序不是Chart表决定的,而是由这个结构体中的索引数组的顺序决定的
//注意在使用这个结构时,list要和它匹配的Chart一起使用,否则会出现得不到想要的结果
//#####要确保listCount<UsedLines
typedef struct
{
	int *list;			//数组,里面的值存储的是指定表中的实际行的数组下标
	int listCount;		//记录数组的个数
} IndexList;


ErrVal ReadFromFile(char *FileName, Chart *OperateChart);
ErrVal CreateNewUnit(Chart *OperateChart, int CreateCount, char(*NewTitleSet)[32], int *NewTitleLimits);